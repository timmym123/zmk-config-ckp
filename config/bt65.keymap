#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

#define BASE    0
#define MAC     1
#define NAV     2
#define NAV_MAC 3
#define KB_FN   4

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    macros {
        bt0_mac: bt0_mac {
            compatible = "zmk,behavior-macro";
            label = "layer_1_rgb";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&bt BT_SEL 0 &to 1>;
        };
        bt1_win: bt1_win {
            compatible = "zmk,behavior-macro";
            label = "layer_0_rgb";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&bt BT_SEL 1 &to 0>;
        };
        sleep_win: sleep_win {
            compatible = "zmk,behavior-macro";
            label = "sleep_win";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_GUI>,
                <&macro_tap>,
                <&kp X>,
                <&macro_release>,
                <&kp LEFT_GUI>,
                <&macro_tap>,
                <&kp U &kp S>;

            wait-ms = <30>;
        };
        spc_dot_shift: spc_dot_shift {
            compatible = "zmk,behavior-macro";
            label = "new_macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp SPACE &sk LSHFT>;
        };
        mac_finder: mac_finder {
            compatible = "zmk,behavior-macro";
            label = "mac_finder";
            #binding-cells = <0>;
            bindings =
                <&kp LG(SPACE)>,
                <&macro_wait_time 2>,
                <&kp F &kp I &kp N &kp D &kp E &kp R &kp RET>;

            wait-ms = <30>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_win_copy {
            bindings = <&longpress LS(INS) LC(INS)>;
            key-positions = <47 48>;
            timeout-ms = <50>;
            layers = <0>;
        };

        combo_mac_copy {
            bindings = <&longpress LG(V) LG(C)>;
            key-positions = <47 48>;
            layers = <1>;
        };

        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <37 38>;
        };

        combo_bspc {
            bindings = <&bspc_morph>;
            key-positions = <24 23>;
        };
    };

    behaviors {
        shift_caps: shift_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS";
            #binding-cells = <0>;
            bindings =
                <&skq LSHFT>,
                <&caps_word>,
                <&kp K_CANCEL>;

            tapping-term-ms = <250>;
        };
        longpress: longpress {
            compatible = "zmk,behavior-hold-tap";
            label = "LONGPRESS";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
        };
        space_morph: space_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "SPACE_MORPH";
            bindings =
                <&kp SPACE>,
                <&spc_dot_shift>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        bspc_morph: bspc_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "BSPC_MORPH";
            bindings =
                <&kp BSPC>,
                <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        skq: skq {
            compatible = "zmk,behavior-sticky-key";
            label = "SKQ";
            bindings = <&kp>;
            #binding-cells = <1>;
            quick-release;
            release-after-ms = <500>;
        };
        nav_t: nav_t {
            compatible = "zmk,behavior-hold-tap";
            label = "NAV_T";
            bindings =
                <&mo>,
                <&kp>;

            #binding-cells = <2>;
            quick-tap-ms = <200>;
            tapping-term-ms = <250>;
            hold-trigger-key-positions = <>;
            flavor = "hold-preferred";
        };
        shf_t: shf_t {
            compatible = "zmk,behavior-hold-tap";
            label = "SHF_T";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "hold-preferred";
            quick-tap-ms = <180>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            // ------------------------------------------------------------------------------------------------------------
            // |  `  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |  8  |  9  |  0  |  -  |  =  |BKSP | INS		|
            // | TAB  |  Q  |  W  |  E  |  R  |  T  |  Y  |  U  |  I  |  O  |  P  |  [  |  ]  |   \    | DEL		|
            // | CAPS  |  A  |  S  |  D  |  F  |  G  |  H  |  J  |  K  |  L  |  ;  |  '  |     ENTER    |PGUP	|
            // |  SHIFT  |  Z  |  X  |  C  |  V  |  B  |  N  |  M  |  ,  |  .  | /   |   SHIFT  | UP   | PGDN|
            // |  CTL  |  WIN  |  ALT  |            SPACE               | ALT | 1    |  MENU| LEFT |  DOWN    | RIGHT	|
            // ------------------------------------------------------------------------------------------------------------

            bindings = <
   &kp TILDE     &kp N1    &kp N2    &kp N3     &kp N4    &kp N5     &kp N6  &kp N7     &kp N8    &kp N9            &kp N0    &kp MINUS  &kp EQUAL  &bspc_morph  &kp C_MUTE
     &kp TAB      &kp Q     &kp W     &kp E      &kp R     &kp T      &kp Y   &kp U      &kp I     &kp O             &kp P     &kp LBKT   &kp RBKT     &kp BSLH    &kp HOME
&nav_t 2 ESC      &kp A     &kp S     &kp D      &kp F     &kp G      &kp H   &kp J      &kp K     &kp L  &kp SINGLE_QUOTE     &kp SEMI    &kp RET    &kp PG_UP
 &shift_caps      &kp Z     &kp X     &kp C      &kp V     &kp B      &kp N   &kp M  &kp COMMA   &kp DOT         &kp SLASH  &shift_caps     &kp UP    &kp PG_DN
              &kp LCTRL  &kp LGUI  &kp LALT  &kp SPACE  &kp RALT  &kp RCTRL   &mo 4   &kp LEFT  &kp DOWN         &kp RIGHT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        MAC {
            bindings = <
&trans  &trans        &trans    &trans  &trans         &trans         &trans  &trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans
&trans  &trans        &trans    &trans  &trans         &trans         &trans  &trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans
&trans  &trans        &trans    &trans  &trans         &trans         &trans  &trans  &trans  &trans  &trans  &trans  &longpress LG(ENTER) ENTER  &trans
&trans  &trans        &trans    &trans  &trans         &trans         &trans  &trans  &trans  &trans  &trans  &trans                      &trans  &trans
        &trans  &kp LEFT_ALT  &kp LGUI  &trans  &kp RIGHT_GUI  &kp RIGHT_ALT  &trans  &trans  &trans  &trans
            >;
        };

        NAV {
            bindings = <
     &trans      &kp F1        &kp F2        &kp F3            &kp F4     &kp F5    &kp F6    &kp F7         &kp F8        &kp F9     &kp F10  &kp F11           &kp F12  &kp DEL  &kp PRINTSCREEN
&kp LG(TAB)  &kp LA(F4)     &kp LC(W)     &kp LG(E)         &kp LC(R)  &kp LC(T)    &trans   &kp TAB  &kp BACKSPACE        &trans      &trans   &trans            &trans   &trans          &kp END
     &trans       &none         &none         &none             &none     &trans  &kp LEFT  &kp DOWN         &kp UP     &kp RIGHT      &trans   &trans  &kp C_PLAY_PAUSE   &trans
     &trans      &trans  &kp LEFT_ALT  &kp LEFT_GUI         &kp LCTRL     &trans    &trans    &trans         &trans        &trans      &trans   &trans      &kp C_VOL_UP   &trans
                 &trans        &trans        &trans  &kp C_PLAY_PAUSE     &trans    &trans    &trans     &kp C_PREV  &kp C_VOL_DN  &kp C_NEXT
            >;

            sensor-bindings = <&inc_dec_kp LC(EQUAL) LC(MINUS)>;
        };

        MAC_NAV {
            bindings = <
&trans     &trans     &trans         &trans     &trans     &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LG(Q)  &kp LG(W)    &mac_finder  &kp LG(R)  &kp LG(T)  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans     &trans     &trans         &trans     &trans     &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans     &trans     &trans         &trans     &trans     &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
           &trans     &trans  &kp LG(SPACE)     &trans     &trans  &trans  &trans  &trans  &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp LG(EQUAL) LG(MINUS)>;
        };

        ADJ {
            bindings = <
 &none  &bt0_mac    &bt1_win  &trans  &trans  &trans  &trans  &trans  &trans           &trans  &trans  &trans           &trans  &bt BT_CLR  &bootloader
&trans    &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans           &trans  &trans  &trans           &trans      &trans       &trans
&trans    &trans  &sleep_win  &trans  &trans  &trans  &trans  &trans  &trans           &trans  &trans  &trans           &trans      &trans
&trans    &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans           &trans  &trans  &trans  &rgb_ug RGB_BRI      &trans
          &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &rgb_ug RGB_BRD  &trans
            >;

            sensor-bindings = <&inc_dec_kp RIGHT LEFT>;
        };
    };
};
